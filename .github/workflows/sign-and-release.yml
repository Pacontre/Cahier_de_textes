name: Release Application

on:
  release:
    types: [created]

jobs:
  sign-and-release:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Sign the executable
      env:
        CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        $certPath = "certificate.pfx"
        [System.IO.File]::WriteAllBytes($certPath, [System.Convert]::FromBase64String($env:CERTIFICATE))
        $securePwd = ConvertTo-SecureString -String $env:CERTIFICATE_PASSWORD -Force -AsPlainText
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certPath, $securePwd, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
        $sign = Set-AuthenticodeSignature -FilePath Cahier_de_textes.exe -Certificate $cert
        if ($sign.Status -ne "Valid") {
          throw "Signature failed: $($sign.StatusMessage)"
        }
      shell: pwsh
    - name: Upload Signed Executable
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Cahier_de_textes.exe
        asset_name: Cahier_de_textes.exe
        asset_content_type: application/octet-stream
    - name: Upload Distribution Zip
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Cahier_de_textes_distribution.zip
        asset_name: Cahier_de_textes_distribution.zip
        asset_content_type: application/zip
